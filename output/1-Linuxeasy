RawReorder:
  constr: CONS_SETLOGIC: (set-logic QF_IDL)

constrDeclare: (declare-const x1-0 Int)
(declare-const x2-0 Int)
(declare-const x39-0 Int)
(declare-const x75-0 Int)
(declare-const x78-0 Int)
(declare-const x1-1 Int)
(declare-const x8-1 Int)
(declare-const x20-1 Int)
(declare-const x24-1 Int)
(declare-const x25-1 Int)
(declare-const x27-1 Int)
(declare-const x31-1 Int)
(declare-const x1-2 Int)
(declare-const x6-2 Int)
(declare-const x9-2 Int)
(declare-const x11-2 Int)
(declare-const x13-2 Int)
(declare-const x487-2 Int)
(declare-const x491-2 Int)
(assert (not (= x1-0 x2-0)))
(assert (not (= x1-0 x39-0)))
(assert (not (= x1-0 x75-0)))
(assert (not (= x1-0 x78-0)))
(assert (not (= x1-0 x1-1)))
(assert (not (= x1-0 x8-1)))
(assert (not (= x1-0 x20-1)))
(assert (not (= x1-0 x24-1)))
(assert (not (= x1-0 x25-1)))
(assert (not (= x1-0 x27-1)))
(assert (not (= x1-0 x31-1)))
(assert (not (= x1-0 x1-2)))
(assert (not (= x1-0 x6-2)))
(assert (not (= x1-0 x9-2)))
(assert (not (= x1-0 x11-2)))
(assert (not (= x1-0 x13-2)))
(assert (not (= x1-0 x487-2)))
(assert (not (= x1-0 x491-2)))
(assert (not (= x2-0 x39-0)))
(assert (not (= x2-0 x75-0)))
(assert (not (= x2-0 x78-0)))
(assert (not (= x2-0 x1-1)))
(assert (not (= x2-0 x8-1)))
(assert (not (= x2-0 x20-1)))
(assert (not (= x2-0 x24-1)))
(assert (not (= x2-0 x25-1)))
(assert (not (= x2-0 x27-1)))
(assert (not (= x2-0 x31-1)))
(assert (not (= x2-0 x1-2)))
(assert (not (= x2-0 x6-2)))
(assert (not (= x2-0 x9-2)))
(assert (not (= x2-0 x11-2)))
(assert (not (= x2-0 x13-2)))
(assert (not (= x2-0 x487-2)))
(assert (not (= x2-0 x491-2)))
(assert (not (= x39-0 x75-0)))
(assert (not (= x39-0 x78-0)))
(assert (not (= x39-0 x1-1)))
(assert (not (= x39-0 x8-1)))
(assert (not (= x39-0 x20-1)))
(assert (not (= x39-0 x24-1)))
(assert (not (= x39-0 x25-1)))
(assert (not (= x39-0 x27-1)))
(assert (not (= x39-0 x31-1)))
(assert (not (= x39-0 x1-2)))
(assert (not (= x39-0 x6-2)))
(assert (not (= x39-0 x9-2)))
(assert (not (= x39-0 x11-2)))
(assert (not (= x39-0 x13-2)))
(assert (not (= x39-0 x487-2)))
(assert (not (= x39-0 x491-2)))
(assert (not (= x75-0 x78-0)))
(assert (not (= x75-0 x1-1)))
(assert (not (= x75-0 x8-1)))
(assert (not (= x75-0 x20-1)))
(assert (not (= x75-0 x24-1)))
(assert (not (= x75-0 x25-1)))
(assert (not (= x75-0 x27-1)))
(assert (not (= x75-0 x31-1)))
(assert (not (= x75-0 x1-2)))
(assert (not (= x75-0 x6-2)))
(assert (not (= x75-0 x9-2)))
(assert (not (= x75-0 x11-2)))
(assert (not (= x75-0 x13-2)))
(assert (not (= x75-0 x487-2)))
(assert (not (= x75-0 x491-2)))
(assert (not (= x78-0 x1-1)))
(assert (not (= x78-0 x8-1)))
(assert (not (= x78-0 x20-1)))
(assert (not (= x78-0 x24-1)))
(assert (not (= x78-0 x25-1)))
(assert (not (= x78-0 x27-1)))
(assert (not (= x78-0 x31-1)))
(assert (not (= x78-0 x1-2)))
(assert (not (= x78-0 x6-2)))
(assert (not (= x78-0 x9-2)))
(assert (not (= x78-0 x11-2)))
(assert (not (= x78-0 x13-2)))
(assert (not (= x78-0 x487-2)))
(assert (not (= x78-0 x491-2)))
(assert (not (= x1-1 x8-1)))
(assert (not (= x1-1 x20-1)))
(assert (not (= x1-1 x24-1)))
(assert (not (= x1-1 x25-1)))
(assert (not (= x1-1 x27-1)))
(assert (not (= x1-1 x31-1)))
(assert (not (= x1-1 x1-2)))
(assert (not (= x1-1 x6-2)))
(assert (not (= x1-1 x9-2)))
(assert (not (= x1-1 x11-2)))
(assert (not (= x1-1 x13-2)))
(assert (not (= x1-1 x487-2)))
(assert (not (= x1-1 x491-2)))
(assert (not (= x8-1 x20-1)))
(assert (not (= x8-1 x24-1)))
(assert (not (= x8-1 x25-1)))
(assert (not (= x8-1 x27-1)))
(assert (not (= x8-1 x31-1)))
(assert (not (= x8-1 x1-2)))
(assert (not (= x8-1 x6-2)))
(assert (not (= x8-1 x9-2)))
(assert (not (= x8-1 x11-2)))
(assert (not (= x8-1 x13-2)))
(assert (not (= x8-1 x487-2)))
(assert (not (= x8-1 x491-2)))
(assert (not (= x20-1 x24-1)))
(assert (not (= x20-1 x25-1)))
(assert (not (= x20-1 x27-1)))
(assert (not (= x20-1 x31-1)))
(assert (not (= x20-1 x1-2)))
(assert (not (= x20-1 x6-2)))
(assert (not (= x20-1 x9-2)))
(assert (not (= x20-1 x11-2)))
(assert (not (= x20-1 x13-2)))
(assert (not (= x20-1 x487-2)))
(assert (not (= x20-1 x491-2)))
(assert (not (= x24-1 x25-1)))
(assert (not (= x24-1 x27-1)))
(assert (not (= x24-1 x31-1)))
(assert (not (= x24-1 x1-2)))
(assert (not (= x24-1 x6-2)))
(assert (not (= x24-1 x9-2)))
(assert (not (= x24-1 x11-2)))
(assert (not (= x24-1 x13-2)))
(assert (not (= x24-1 x487-2)))
(assert (not (= x24-1 x491-2)))
(assert (not (= x25-1 x27-1)))
(assert (not (= x25-1 x31-1)))
(assert (not (= x25-1 x1-2)))
(assert (not (= x25-1 x6-2)))
(assert (not (= x25-1 x9-2)))
(assert (not (= x25-1 x11-2)))
(assert (not (= x25-1 x13-2)))
(assert (not (= x25-1 x487-2)))
(assert (not (= x25-1 x491-2)))
(assert (not (= x27-1 x31-1)))
(assert (not (= x27-1 x1-2)))
(assert (not (= x27-1 x6-2)))
(assert (not (= x27-1 x9-2)))
(assert (not (= x27-1 x11-2)))
(assert (not (= x27-1 x13-2)))
(assert (not (= x27-1 x487-2)))
(assert (not (= x27-1 x491-2)))
(assert (not (= x31-1 x1-2)))
(assert (not (= x31-1 x6-2)))
(assert (not (= x31-1 x9-2)))
(assert (not (= x31-1 x11-2)))
(assert (not (= x31-1 x13-2)))
(assert (not (= x31-1 x487-2)))
(assert (not (= x31-1 x491-2)))
(assert (not (= x1-2 x6-2)))
(assert (not (= x1-2 x9-2)))
(assert (not (= x1-2 x11-2)))
(assert (not (= x1-2 x13-2)))
(assert (not (= x1-2 x487-2)))
(assert (not (= x1-2 x491-2)))
(assert (not (= x6-2 x9-2)))
(assert (not (= x6-2 x11-2)))
(assert (not (= x6-2 x13-2)))
(assert (not (= x6-2 x487-2)))
(assert (not (= x6-2 x491-2)))
(assert (not (= x9-2 x11-2)))
(assert (not (= x9-2 x13-2)))
(assert (not (= x9-2 x487-2)))
(assert (not (= x9-2 x491-2)))
(assert (not (= x11-2 x13-2)))
(assert (not (= x11-2 x487-2)))
(assert (not (= x11-2 x491-2)))
(assert (not (= x13-2 x487-2)))
(assert (not (= x13-2 x491-2)))
(assert (not (= x487-2 x491-2)))

constrMHB: (assert(< x1-0 x2-0))
(assert(< x1-0 x39-0))
(assert(< x1-0 x75-0))
(assert(< x1-0 x78-0))
(assert(< x1-0 x2-0))
(assert(< x2-0 x39-0))
(assert(< x39-0 x75-0))
(assert(< x75-0 x78-0))
(assert(< x1-2 x6-2))
(assert(< x1-2 x9-2))
(assert(< x1-2 x11-2))
(assert(< x1-2 x13-2))
(assert(< x1-2 x487-2))
(assert(< x1-2 x491-2))
(assert(< x6-2 x491-2))
(assert(< x9-2 x491-2))
(assert(< x11-2 x491-2))
(assert(< x13-2 x491-2))
(assert(< x487-2 x491-2))
(assert(< x1-2 x6-2))
(assert(< x11-2 x13-2))
(assert(< x13-2 x487-2))
(assert(< x487-2 x491-2))
(assert(< x1-1 x8-1))
(assert(< x1-1 x20-1))
(assert(< x1-1 x24-1))
(assert(< x1-1 x25-1))
(assert(< x1-1 x27-1))
(assert(< x1-1 x31-1))
(assert(< x8-1 x31-1))
(assert(< x20-1 x31-1))
(assert(< x24-1 x31-1))
(assert(< x25-1 x31-1))
(assert(< x27-1 x31-1))
(assert(< x1-1 x8-1))
(assert(< x8-1 x20-1))
(assert(< x20-1 x24-1))
(assert(< x24-1 x25-1))
(assert(< x25-1 x27-1))
(assert(< x27-1 x31-1))

constrSync: (assert (< x2-0 x1-1 ))
(assert (< x39-0 x1-2 ))
(assert (< x31-1 x75-0 ))
(assert (< x491-2 x78-0 ))

obeyStr: (assert(and (< x11-2 x24-1)
 (or (< x24-1 x8-1) (< x8-1 x11-2 ))
 )
)

violateStr: (assert (or (not (and (< x6-2 x13-2)
 (or (< x13-2 x27-1) (< x27-1 x6-2 ))
 )
)))


  Switch Pair: Pair[Node: gid: 6 #2   pc:0x46e002 W  addr:140491777372960  len: 1 value:1 order:1068 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4), Node: gid: 11 #2   pc:0x4b6d99 W  addr:140492326781736  len: 8 value:140491777372960 order:1075 line:/ufo/reorder/1-Linuxeasy.c:58]
  Depend Pair: Pair[Node: gid: 8 #1   pc:0x4b6d30 W  addr:140492326781736  len: 8 value:0 order:501 line:/ufo/reorder/1-Linuxeasy.c:51, Node: gid: 27 #1   pc:0x46e002 W  addr:140491777372960  len: 1 value:0 order:1558 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4)]
  Schedule:
[31m    x1-0    gid: 1 #0   begin order: 0[0m
[31m    x2-0    gid: 2 #0   pc:0x4282cc start  -> #1 order: 2[0m
[31m    x39-0    gid: 39 #0   pc:0x4282cc start  -> #2 order: 520[0m
[32m    x1-1    gid: 1 #1   begin order: 490[0m
[32m    x8-1    gid: 8 #1   pc:0x4b6d30 W  addr:140492326781736  len: 8 value:0 order:501 line:/ufo/reorder/1-Linuxeasy.c:51[0m * Depend
[32m    x20-1    gid: 20 #1   pc:0x46f51d W  addr:21817848  len: 8 value:140492326781728 order:515 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:597 (discriminator 4)[0m
[33m    x1-2    gid: 1 #2   begin order: 1059[0m
[33m    x9-2    gid: 9 #2   pc:0x46f51d W  addr:21817848  len: 8 value:140491777372960 order:1073 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:597 (discriminator 4)[0m
[33m    x11-2    gid: 11 #2   pc:0x4b6d99 W  addr:140492326781736  len: 8 value:140491777372960 order:1075 line:/ufo/reorder/1-Linuxeasy.c:58[0m * Swap
[32m    x24-1    gid: 24 #1   pc:0x4b6e57  R   addr:140492326781736  len: 8 value:140491777372960 order: 1546 line:/ufo/reorder/1-Linuxeasy.c:67[0m
[32m    x25-1    gid: 25 #1   pc:0x4b6f35  R   addr:140492326781736  len: 8 value:140491777372960 order: 1553 line:/ufo/reorder/1-Linuxeasy.c:77[0m
[33m    x6-2    gid: 6 #2   pc:0x46e002 W  addr:140491777372960  len: 1 value:1 order:1068 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4)[0m * Swap
[32m    x27-1    gid: 27 #1   pc:0x46e002 W  addr:140491777372960  len: 1 value:0 order:1558 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4)[0m * Depend
[32m    x31-1    gid: 31 #1   end order:1573[0m
[31m    x75-0    75 #0   pc: 0x44f0e8 Join   <- 1  order 1581[0m
[33m    x13-2    gid: 13 #2   pc:0x46d272  R   addr:140491777372960  len: 1 value:1 order: 1079 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:528 (discriminator 4)[0m
[33m    x487-2    gid: 487 #2   pc:0x475201 W  addr:21817848  len: 8 value:0 order:1574 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:476 (discriminator 4)[0m
[33m    x491-2    gid: 491 #2   end order:1579[0m
[31m    x78-0    78 #0   pc: 0x44f0e8 Join   <- 2  order 1585[0m

RawReorder:
  constr: CONS_SETLOGIC: (set-logic QF_IDL)

constrDeclare: (declare-const x1-0 Int)
(declare-const x2-0 Int)
(declare-const x39-0 Int)
(declare-const x75-0 Int)
(declare-const x78-0 Int)
(declare-const x1-1 Int)
(declare-const x8-1 Int)
(declare-const x20-1 Int)
(declare-const x24-1 Int)
(declare-const x25-1 Int)
(declare-const x27-1 Int)
(declare-const x31-1 Int)
(declare-const x1-2 Int)
(declare-const x6-2 Int)
(declare-const x9-2 Int)
(declare-const x11-2 Int)
(declare-const x13-2 Int)
(declare-const x487-2 Int)
(declare-const x491-2 Int)
(assert (not (= x1-0 x2-0)))
(assert (not (= x1-0 x39-0)))
(assert (not (= x1-0 x75-0)))
(assert (not (= x1-0 x78-0)))
(assert (not (= x1-0 x1-1)))
(assert (not (= x1-0 x8-1)))
(assert (not (= x1-0 x20-1)))
(assert (not (= x1-0 x24-1)))
(assert (not (= x1-0 x25-1)))
(assert (not (= x1-0 x27-1)))
(assert (not (= x1-0 x31-1)))
(assert (not (= x1-0 x1-2)))
(assert (not (= x1-0 x6-2)))
(assert (not (= x1-0 x9-2)))
(assert (not (= x1-0 x11-2)))
(assert (not (= x1-0 x13-2)))
(assert (not (= x1-0 x487-2)))
(assert (not (= x1-0 x491-2)))
(assert (not (= x2-0 x39-0)))
(assert (not (= x2-0 x75-0)))
(assert (not (= x2-0 x78-0)))
(assert (not (= x2-0 x1-1)))
(assert (not (= x2-0 x8-1)))
(assert (not (= x2-0 x20-1)))
(assert (not (= x2-0 x24-1)))
(assert (not (= x2-0 x25-1)))
(assert (not (= x2-0 x27-1)))
(assert (not (= x2-0 x31-1)))
(assert (not (= x2-0 x1-2)))
(assert (not (= x2-0 x6-2)))
(assert (not (= x2-0 x9-2)))
(assert (not (= x2-0 x11-2)))
(assert (not (= x2-0 x13-2)))
(assert (not (= x2-0 x487-2)))
(assert (not (= x2-0 x491-2)))
(assert (not (= x39-0 x75-0)))
(assert (not (= x39-0 x78-0)))
(assert (not (= x39-0 x1-1)))
(assert (not (= x39-0 x8-1)))
(assert (not (= x39-0 x20-1)))
(assert (not (= x39-0 x24-1)))
(assert (not (= x39-0 x25-1)))
(assert (not (= x39-0 x27-1)))
(assert (not (= x39-0 x31-1)))
(assert (not (= x39-0 x1-2)))
(assert (not (= x39-0 x6-2)))
(assert (not (= x39-0 x9-2)))
(assert (not (= x39-0 x11-2)))
(assert (not (= x39-0 x13-2)))
(assert (not (= x39-0 x487-2)))
(assert (not (= x39-0 x491-2)))
(assert (not (= x75-0 x78-0)))
(assert (not (= x75-0 x1-1)))
(assert (not (= x75-0 x8-1)))
(assert (not (= x75-0 x20-1)))
(assert (not (= x75-0 x24-1)))
(assert (not (= x75-0 x25-1)))
(assert (not (= x75-0 x27-1)))
(assert (not (= x75-0 x31-1)))
(assert (not (= x75-0 x1-2)))
(assert (not (= x75-0 x6-2)))
(assert (not (= x75-0 x9-2)))
(assert (not (= x75-0 x11-2)))
(assert (not (= x75-0 x13-2)))
(assert (not (= x75-0 x487-2)))
(assert (not (= x75-0 x491-2)))
(assert (not (= x78-0 x1-1)))
(assert (not (= x78-0 x8-1)))
(assert (not (= x78-0 x20-1)))
(assert (not (= x78-0 x24-1)))
(assert (not (= x78-0 x25-1)))
(assert (not (= x78-0 x27-1)))
(assert (not (= x78-0 x31-1)))
(assert (not (= x78-0 x1-2)))
(assert (not (= x78-0 x6-2)))
(assert (not (= x78-0 x9-2)))
(assert (not (= x78-0 x11-2)))
(assert (not (= x78-0 x13-2)))
(assert (not (= x78-0 x487-2)))
(assert (not (= x78-0 x491-2)))
(assert (not (= x1-1 x8-1)))
(assert (not (= x1-1 x20-1)))
(assert (not (= x1-1 x24-1)))
(assert (not (= x1-1 x25-1)))
(assert (not (= x1-1 x27-1)))
(assert (not (= x1-1 x31-1)))
(assert (not (= x1-1 x1-2)))
(assert (not (= x1-1 x6-2)))
(assert (not (= x1-1 x9-2)))
(assert (not (= x1-1 x11-2)))
(assert (not (= x1-1 x13-2)))
(assert (not (= x1-1 x487-2)))
(assert (not (= x1-1 x491-2)))
(assert (not (= x8-1 x20-1)))
(assert (not (= x8-1 x24-1)))
(assert (not (= x8-1 x25-1)))
(assert (not (= x8-1 x27-1)))
(assert (not (= x8-1 x31-1)))
(assert (not (= x8-1 x1-2)))
(assert (not (= x8-1 x6-2)))
(assert (not (= x8-1 x9-2)))
(assert (not (= x8-1 x11-2)))
(assert (not (= x8-1 x13-2)))
(assert (not (= x8-1 x487-2)))
(assert (not (= x8-1 x491-2)))
(assert (not (= x20-1 x24-1)))
(assert (not (= x20-1 x25-1)))
(assert (not (= x20-1 x27-1)))
(assert (not (= x20-1 x31-1)))
(assert (not (= x20-1 x1-2)))
(assert (not (= x20-1 x6-2)))
(assert (not (= x20-1 x9-2)))
(assert (not (= x20-1 x11-2)))
(assert (not (= x20-1 x13-2)))
(assert (not (= x20-1 x487-2)))
(assert (not (= x20-1 x491-2)))
(assert (not (= x24-1 x25-1)))
(assert (not (= x24-1 x27-1)))
(assert (not (= x24-1 x31-1)))
(assert (not (= x24-1 x1-2)))
(assert (not (= x24-1 x6-2)))
(assert (not (= x24-1 x9-2)))
(assert (not (= x24-1 x11-2)))
(assert (not (= x24-1 x13-2)))
(assert (not (= x24-1 x487-2)))
(assert (not (= x24-1 x491-2)))
(assert (not (= x25-1 x27-1)))
(assert (not (= x25-1 x31-1)))
(assert (not (= x25-1 x1-2)))
(assert (not (= x25-1 x6-2)))
(assert (not (= x25-1 x9-2)))
(assert (not (= x25-1 x11-2)))
(assert (not (= x25-1 x13-2)))
(assert (not (= x25-1 x487-2)))
(assert (not (= x25-1 x491-2)))
(assert (not (= x27-1 x31-1)))
(assert (not (= x27-1 x1-2)))
(assert (not (= x27-1 x6-2)))
(assert (not (= x27-1 x9-2)))
(assert (not (= x27-1 x11-2)))
(assert (not (= x27-1 x13-2)))
(assert (not (= x27-1 x487-2)))
(assert (not (= x27-1 x491-2)))
(assert (not (= x31-1 x1-2)))
(assert (not (= x31-1 x6-2)))
(assert (not (= x31-1 x9-2)))
(assert (not (= x31-1 x11-2)))
(assert (not (= x31-1 x13-2)))
(assert (not (= x31-1 x487-2)))
(assert (not (= x31-1 x491-2)))
(assert (not (= x1-2 x6-2)))
(assert (not (= x1-2 x9-2)))
(assert (not (= x1-2 x11-2)))
(assert (not (= x1-2 x13-2)))
(assert (not (= x1-2 x487-2)))
(assert (not (= x1-2 x491-2)))
(assert (not (= x6-2 x9-2)))
(assert (not (= x6-2 x11-2)))
(assert (not (= x6-2 x13-2)))
(assert (not (= x6-2 x487-2)))
(assert (not (= x6-2 x491-2)))
(assert (not (= x9-2 x11-2)))
(assert (not (= x9-2 x13-2)))
(assert (not (= x9-2 x487-2)))
(assert (not (= x9-2 x491-2)))
(assert (not (= x11-2 x13-2)))
(assert (not (= x11-2 x487-2)))
(assert (not (= x11-2 x491-2)))
(assert (not (= x13-2 x487-2)))
(assert (not (= x13-2 x491-2)))
(assert (not (= x487-2 x491-2)))

constrMHB: (assert(< x1-0 x2-0))
(assert(< x1-0 x39-0))
(assert(< x1-0 x75-0))
(assert(< x1-0 x78-0))
(assert(< x1-0 x2-0))
(assert(< x2-0 x39-0))
(assert(< x39-0 x75-0))
(assert(< x75-0 x78-0))
(assert(< x1-2 x6-2))
(assert(< x1-2 x9-2))
(assert(< x1-2 x11-2))
(assert(< x1-2 x13-2))
(assert(< x1-2 x487-2))
(assert(< x1-2 x491-2))
(assert(< x6-2 x491-2))
(assert(< x9-2 x491-2))
(assert(< x11-2 x491-2))
(assert(< x13-2 x491-2))
(assert(< x487-2 x491-2))
(assert(< x1-2 x6-2))
(assert(< x11-2 x13-2))
(assert(< x13-2 x487-2))
(assert(< x487-2 x491-2))
(assert(< x1-1 x8-1))
(assert(< x1-1 x20-1))
(assert(< x1-1 x24-1))
(assert(< x1-1 x25-1))
(assert(< x1-1 x27-1))
(assert(< x1-1 x31-1))
(assert(< x8-1 x31-1))
(assert(< x20-1 x31-1))
(assert(< x24-1 x31-1))
(assert(< x25-1 x31-1))
(assert(< x27-1 x31-1))
(assert(< x1-1 x8-1))
(assert(< x8-1 x20-1))
(assert(< x20-1 x24-1))
(assert(< x24-1 x25-1))
(assert(< x25-1 x27-1))
(assert(< x27-1 x31-1))

constrSync: (assert (< x2-0 x1-1 ))
(assert (< x39-0 x1-2 ))
(assert (< x31-1 x75-0 ))
(assert (< x491-2 x78-0 ))

obeyStr: (assert(and (< x11-2 x24-1)
 (or (< x24-1 x8-1) (< x8-1 x11-2 ))
 )
)

violateStr: (assert (or (not (and (< x6-2 x13-2)
 (or (< x13-2 x27-1) (< x27-1 x6-2 ))
 )
)))


  Switch Pair: Pair[Node: gid: 6 #2   pc:0x46e002 W  addr:140491777372960  len: 1 value:1 order:1068 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4), Node: gid: 11 #2   pc:0x4b6d99 W  addr:140492326781736  len: 8 value:140491777372960 order:1075 line:/ufo/reorder/1-Linuxeasy.c:58]
  Depend Pair: Pair[Node: gid: 24 #1   pc:0x4b6e57  R   addr:140492326781736  len: 8 value:140491777372960 order: 1546 line:/ufo/reorder/1-Linuxeasy.c:67, Node: gid: 27 #1   pc:0x46e002 W  addr:140491777372960  len: 1 value:0 order:1558 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4)]
  Schedule:
[31m    x1-0    gid: 1 #0   begin order: 0[0m
[31m    x2-0    gid: 2 #0   pc:0x4282cc start  -> #1 order: 2[0m
[31m    x39-0    gid: 39 #0   pc:0x4282cc start  -> #2 order: 520[0m
[32m    x1-1    gid: 1 #1   begin order: 490[0m
[32m    x8-1    gid: 8 #1   pc:0x4b6d30 W  addr:140492326781736  len: 8 value:0 order:501 line:/ufo/reorder/1-Linuxeasy.c:51[0m
[32m    x20-1    gid: 20 #1   pc:0x46f51d W  addr:21817848  len: 8 value:140492326781728 order:515 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:597 (discriminator 4)[0m
[33m    x1-2    gid: 1 #2   begin order: 1059[0m
[33m    x9-2    gid: 9 #2   pc:0x46f51d W  addr:21817848  len: 8 value:140491777372960 order:1073 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:597 (discriminator 4)[0m
[33m    x11-2    gid: 11 #2   pc:0x4b6d99 W  addr:140492326781736  len: 8 value:140491777372960 order:1075 line:/ufo/reorder/1-Linuxeasy.c:58[0m * Swap
[32m    x24-1    gid: 24 #1   pc:0x4b6e57  R   addr:140492326781736  len: 8 value:140491777372960 order: 1546 line:/ufo/reorder/1-Linuxeasy.c:67[0m * Depend
[32m    x25-1    gid: 25 #1   pc:0x4b6f35  R   addr:140492326781736  len: 8 value:140491777372960 order: 1553 line:/ufo/reorder/1-Linuxeasy.c:77[0m
[33m    x6-2    gid: 6 #2   pc:0x46e002 W  addr:140491777372960  len: 1 value:1 order:1068 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4)[0m * Swap
[32m    x27-1    gid: 27 #1   pc:0x46e002 W  addr:140491777372960  len: 1 value:0 order:1558 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4)[0m * Depend
[32m    x31-1    gid: 31 #1   end order:1573[0m
[31m    x75-0    75 #0   pc: 0x44f0e8 Join   <- 1  order 1581[0m
[33m    x13-2    gid: 13 #2   pc:0x46d272  R   addr:140491777372960  len: 1 value:1 order: 1079 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:528 (discriminator 4)[0m
[33m    x487-2    gid: 487 #2   pc:0x475201 W  addr:21817848  len: 8 value:0 order:1574 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:476 (discriminator 4)[0m
[33m    x491-2    gid: 491 #2   end order:1579[0m
[31m    x78-0    78 #0   pc: 0x44f0e8 Join   <- 2  order 1585[0m

RawReorder:
  constr: CONS_SETLOGIC: (set-logic QF_IDL)

constrDeclare: (declare-const x1-0 Int)
(declare-const x2-0 Int)
(declare-const x39-0 Int)
(declare-const x75-0 Int)
(declare-const x78-0 Int)
(declare-const x1-1 Int)
(declare-const x8-1 Int)
(declare-const x20-1 Int)
(declare-const x24-1 Int)
(declare-const x25-1 Int)
(declare-const x27-1 Int)
(declare-const x31-1 Int)
(declare-const x1-2 Int)
(declare-const x6-2 Int)
(declare-const x9-2 Int)
(declare-const x11-2 Int)
(declare-const x13-2 Int)
(declare-const x487-2 Int)
(declare-const x491-2 Int)
(assert (not (= x1-0 x2-0)))
(assert (not (= x1-0 x39-0)))
(assert (not (= x1-0 x75-0)))
(assert (not (= x1-0 x78-0)))
(assert (not (= x1-0 x1-1)))
(assert (not (= x1-0 x8-1)))
(assert (not (= x1-0 x20-1)))
(assert (not (= x1-0 x24-1)))
(assert (not (= x1-0 x25-1)))
(assert (not (= x1-0 x27-1)))
(assert (not (= x1-0 x31-1)))
(assert (not (= x1-0 x1-2)))
(assert (not (= x1-0 x6-2)))
(assert (not (= x1-0 x9-2)))
(assert (not (= x1-0 x11-2)))
(assert (not (= x1-0 x13-2)))
(assert (not (= x1-0 x487-2)))
(assert (not (= x1-0 x491-2)))
(assert (not (= x2-0 x39-0)))
(assert (not (= x2-0 x75-0)))
(assert (not (= x2-0 x78-0)))
(assert (not (= x2-0 x1-1)))
(assert (not (= x2-0 x8-1)))
(assert (not (= x2-0 x20-1)))
(assert (not (= x2-0 x24-1)))
(assert (not (= x2-0 x25-1)))
(assert (not (= x2-0 x27-1)))
(assert (not (= x2-0 x31-1)))
(assert (not (= x2-0 x1-2)))
(assert (not (= x2-0 x6-2)))
(assert (not (= x2-0 x9-2)))
(assert (not (= x2-0 x11-2)))
(assert (not (= x2-0 x13-2)))
(assert (not (= x2-0 x487-2)))
(assert (not (= x2-0 x491-2)))
(assert (not (= x39-0 x75-0)))
(assert (not (= x39-0 x78-0)))
(assert (not (= x39-0 x1-1)))
(assert (not (= x39-0 x8-1)))
(assert (not (= x39-0 x20-1)))
(assert (not (= x39-0 x24-1)))
(assert (not (= x39-0 x25-1)))
(assert (not (= x39-0 x27-1)))
(assert (not (= x39-0 x31-1)))
(assert (not (= x39-0 x1-2)))
(assert (not (= x39-0 x6-2)))
(assert (not (= x39-0 x9-2)))
(assert (not (= x39-0 x11-2)))
(assert (not (= x39-0 x13-2)))
(assert (not (= x39-0 x487-2)))
(assert (not (= x39-0 x491-2)))
(assert (not (= x75-0 x78-0)))
(assert (not (= x75-0 x1-1)))
(assert (not (= x75-0 x8-1)))
(assert (not (= x75-0 x20-1)))
(assert (not (= x75-0 x24-1)))
(assert (not (= x75-0 x25-1)))
(assert (not (= x75-0 x27-1)))
(assert (not (= x75-0 x31-1)))
(assert (not (= x75-0 x1-2)))
(assert (not (= x75-0 x6-2)))
(assert (not (= x75-0 x9-2)))
(assert (not (= x75-0 x11-2)))
(assert (not (= x75-0 x13-2)))
(assert (not (= x75-0 x487-2)))
(assert (not (= x75-0 x491-2)))
(assert (not (= x78-0 x1-1)))
(assert (not (= x78-0 x8-1)))
(assert (not (= x78-0 x20-1)))
(assert (not (= x78-0 x24-1)))
(assert (not (= x78-0 x25-1)))
(assert (not (= x78-0 x27-1)))
(assert (not (= x78-0 x31-1)))
(assert (not (= x78-0 x1-2)))
(assert (not (= x78-0 x6-2)))
(assert (not (= x78-0 x9-2)))
(assert (not (= x78-0 x11-2)))
(assert (not (= x78-0 x13-2)))
(assert (not (= x78-0 x487-2)))
(assert (not (= x78-0 x491-2)))
(assert (not (= x1-1 x8-1)))
(assert (not (= x1-1 x20-1)))
(assert (not (= x1-1 x24-1)))
(assert (not (= x1-1 x25-1)))
(assert (not (= x1-1 x27-1)))
(assert (not (= x1-1 x31-1)))
(assert (not (= x1-1 x1-2)))
(assert (not (= x1-1 x6-2)))
(assert (not (= x1-1 x9-2)))
(assert (not (= x1-1 x11-2)))
(assert (not (= x1-1 x13-2)))
(assert (not (= x1-1 x487-2)))
(assert (not (= x1-1 x491-2)))
(assert (not (= x8-1 x20-1)))
(assert (not (= x8-1 x24-1)))
(assert (not (= x8-1 x25-1)))
(assert (not (= x8-1 x27-1)))
(assert (not (= x8-1 x31-1)))
(assert (not (= x8-1 x1-2)))
(assert (not (= x8-1 x6-2)))
(assert (not (= x8-1 x9-2)))
(assert (not (= x8-1 x11-2)))
(assert (not (= x8-1 x13-2)))
(assert (not (= x8-1 x487-2)))
(assert (not (= x8-1 x491-2)))
(assert (not (= x20-1 x24-1)))
(assert (not (= x20-1 x25-1)))
(assert (not (= x20-1 x27-1)))
(assert (not (= x20-1 x31-1)))
(assert (not (= x20-1 x1-2)))
(assert (not (= x20-1 x6-2)))
(assert (not (= x20-1 x9-2)))
(assert (not (= x20-1 x11-2)))
(assert (not (= x20-1 x13-2)))
(assert (not (= x20-1 x487-2)))
(assert (not (= x20-1 x491-2)))
(assert (not (= x24-1 x25-1)))
(assert (not (= x24-1 x27-1)))
(assert (not (= x24-1 x31-1)))
(assert (not (= x24-1 x1-2)))
(assert (not (= x24-1 x6-2)))
(assert (not (= x24-1 x9-2)))
(assert (not (= x24-1 x11-2)))
(assert (not (= x24-1 x13-2)))
(assert (not (= x24-1 x487-2)))
(assert (not (= x24-1 x491-2)))
(assert (not (= x25-1 x27-1)))
(assert (not (= x25-1 x31-1)))
(assert (not (= x25-1 x1-2)))
(assert (not (= x25-1 x6-2)))
(assert (not (= x25-1 x9-2)))
(assert (not (= x25-1 x11-2)))
(assert (not (= x25-1 x13-2)))
(assert (not (= x25-1 x487-2)))
(assert (not (= x25-1 x491-2)))
(assert (not (= x27-1 x31-1)))
(assert (not (= x27-1 x1-2)))
(assert (not (= x27-1 x6-2)))
(assert (not (= x27-1 x9-2)))
(assert (not (= x27-1 x11-2)))
(assert (not (= x27-1 x13-2)))
(assert (not (= x27-1 x487-2)))
(assert (not (= x27-1 x491-2)))
(assert (not (= x31-1 x1-2)))
(assert (not (= x31-1 x6-2)))
(assert (not (= x31-1 x9-2)))
(assert (not (= x31-1 x11-2)))
(assert (not (= x31-1 x13-2)))
(assert (not (= x31-1 x487-2)))
(assert (not (= x31-1 x491-2)))
(assert (not (= x1-2 x6-2)))
(assert (not (= x1-2 x9-2)))
(assert (not (= x1-2 x11-2)))
(assert (not (= x1-2 x13-2)))
(assert (not (= x1-2 x487-2)))
(assert (not (= x1-2 x491-2)))
(assert (not (= x6-2 x9-2)))
(assert (not (= x6-2 x11-2)))
(assert (not (= x6-2 x13-2)))
(assert (not (= x6-2 x487-2)))
(assert (not (= x6-2 x491-2)))
(assert (not (= x9-2 x11-2)))
(assert (not (= x9-2 x13-2)))
(assert (not (= x9-2 x487-2)))
(assert (not (= x9-2 x491-2)))
(assert (not (= x11-2 x13-2)))
(assert (not (= x11-2 x487-2)))
(assert (not (= x11-2 x491-2)))
(assert (not (= x13-2 x487-2)))
(assert (not (= x13-2 x491-2)))
(assert (not (= x487-2 x491-2)))

constrMHB: (assert(< x1-0 x2-0))
(assert(< x1-0 x39-0))
(assert(< x1-0 x75-0))
(assert(< x1-0 x78-0))
(assert(< x1-0 x2-0))
(assert(< x2-0 x39-0))
(assert(< x39-0 x75-0))
(assert(< x75-0 x78-0))
(assert(< x1-2 x6-2))
(assert(< x1-2 x9-2))
(assert(< x1-2 x11-2))
(assert(< x1-2 x13-2))
(assert(< x1-2 x487-2))
(assert(< x1-2 x491-2))
(assert(< x6-2 x491-2))
(assert(< x9-2 x491-2))
(assert(< x11-2 x491-2))
(assert(< x13-2 x491-2))
(assert(< x487-2 x491-2))
(assert(< x1-2 x6-2))
(assert(< x6-2 x9-2))
(assert(< x9-2 x11-2))
(assert(< x11-2 x13-2))
(assert(< x13-2 x487-2))
(assert(< x487-2 x491-2))
(assert(< x1-1 x8-1))
(assert(< x1-1 x20-1))
(assert(< x1-1 x24-1))
(assert(< x1-1 x25-1))
(assert(< x1-1 x27-1))
(assert(< x1-1 x31-1))
(assert(< x8-1 x31-1))
(assert(< x20-1 x31-1))
(assert(< x24-1 x31-1))
(assert(< x25-1 x31-1))
(assert(< x27-1 x31-1))
(assert(< x1-1 x8-1))
(assert(< x8-1 x20-1))
(assert(< x20-1 x24-1))
(assert(< x24-1 x25-1))
(assert(< x27-1 x31-1))

constrSync: (assert (< x2-0 x1-1 ))
(assert (< x39-0 x1-2 ))
(assert (< x31-1 x75-0 ))
(assert (< x491-2 x78-0 ))

obeyStr: (assert(and (< x6-2 x13-2)
 (or (< x13-2 x27-1) (< x27-1 x6-2 ))
 )
)

violateStr: (assert (or (not (and (< x11-2 x25-1)
 (or (< x25-1 x8-1) (< x8-1 x11-2 ))
 )
)))


  Switch Pair: Pair[Node: gid: 25 #1   pc:0x4b6f35  R   addr:140492326781736  len: 8 value:140491777372960 order: 1553 line:/ufo/reorder/1-Linuxeasy.c:77, Node: gid: 27 #1   pc:0x46e002 W  addr:140491777372960  len: 1 value:0 order:1558 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4)]
  Depend Pair: Pair[Node: gid: 6 #2   pc:0x46e002 W  addr:140491777372960  len: 1 value:1 order:1068 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4), Node: gid: 11 #2   pc:0x4b6d99 W  addr:140492326781736  len: 8 value:140491777372960 order:1075 line:/ufo/reorder/1-Linuxeasy.c:58]
  Schedule:
[31m    x1-0    gid: 1 #0   begin order: 0[0m
[31m    x2-0    gid: 2 #0   pc:0x4282cc start  -> #1 order: 2[0m
[31m    x39-0    gid: 39 #0   pc:0x4282cc start  -> #2 order: 520[0m
[32m    x1-1    gid: 1 #1   begin order: 490[0m
[32m    x27-1    gid: 27 #1   pc:0x46e002 W  addr:140491777372960  len: 1 value:0 order:1558 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4)[0m * Swap
[33m    x1-2    gid: 1 #2   begin order: 1059[0m
[33m    x6-2    gid: 6 #2   pc:0x46e002 W  addr:140491777372960  len: 1 value:1 order:1068 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4)[0m * Depend
[33m    x9-2    gid: 9 #2   pc:0x46f51d W  addr:21817848  len: 8 value:140491777372960 order:1073 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:597 (discriminator 4)[0m
[33m    x11-2    gid: 11 #2   pc:0x4b6d99 W  addr:140492326781736  len: 8 value:140491777372960 order:1075 line:/ufo/reorder/1-Linuxeasy.c:58[0m * Depend
[32m    x8-1    gid: 8 #1   pc:0x4b6d30 W  addr:140492326781736  len: 8 value:0 order:501 line:/ufo/reorder/1-Linuxeasy.c:51[0m
[32m    x20-1    gid: 20 #1   pc:0x46f51d W  addr:21817848  len: 8 value:140492326781728 order:515 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:597 (discriminator 4)[0m
[32m    x24-1    gid: 24 #1   pc:0x4b6e57  R   addr:140492326781736  len: 8 value:140491777372960 order: 1546 line:/ufo/reorder/1-Linuxeasy.c:67[0m
[32m    x25-1    gid: 25 #1   pc:0x4b6f35  R   addr:140492326781736  len: 8 value:140491777372960 order: 1553 line:/ufo/reorder/1-Linuxeasy.c:77[0m * Swap
[32m    x31-1    gid: 31 #1   end order:1573[0m
[31m    x75-0    75 #0   pc: 0x44f0e8 Join   <- 1  order 1581[0m
[33m    x13-2    gid: 13 #2   pc:0x46d272  R   addr:140491777372960  len: 1 value:1 order: 1079 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:528 (discriminator 4)[0m
[33m    x487-2    gid: 487 #2   pc:0x475201 W  addr:21817848  len: 8 value:0 order:1574 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:476 (discriminator 4)[0m
[33m    x491-2    gid: 491 #2   end order:1579[0m
[31m    x78-0    78 #0   pc: 0x44f0e8 Join   <- 2  order 1585[0m

RawReorder:
  constr: CONS_SETLOGIC: (set-logic QF_IDL)

constrDeclare: (declare-const x1-0 Int)
(declare-const x2-0 Int)
(declare-const x39-0 Int)
(declare-const x75-0 Int)
(declare-const x78-0 Int)
(declare-const x1-1 Int)
(declare-const x8-1 Int)
(declare-const x20-1 Int)
(declare-const x24-1 Int)
(declare-const x25-1 Int)
(declare-const x27-1 Int)
(declare-const x31-1 Int)
(declare-const x1-2 Int)
(declare-const x6-2 Int)
(declare-const x9-2 Int)
(declare-const x11-2 Int)
(declare-const x13-2 Int)
(declare-const x487-2 Int)
(declare-const x491-2 Int)
(assert (not (= x1-0 x2-0)))
(assert (not (= x1-0 x39-0)))
(assert (not (= x1-0 x75-0)))
(assert (not (= x1-0 x78-0)))
(assert (not (= x1-0 x1-1)))
(assert (not (= x1-0 x8-1)))
(assert (not (= x1-0 x20-1)))
(assert (not (= x1-0 x24-1)))
(assert (not (= x1-0 x25-1)))
(assert (not (= x1-0 x27-1)))
(assert (not (= x1-0 x31-1)))
(assert (not (= x1-0 x1-2)))
(assert (not (= x1-0 x6-2)))
(assert (not (= x1-0 x9-2)))
(assert (not (= x1-0 x11-2)))
(assert (not (= x1-0 x13-2)))
(assert (not (= x1-0 x487-2)))
(assert (not (= x1-0 x491-2)))
(assert (not (= x2-0 x39-0)))
(assert (not (= x2-0 x75-0)))
(assert (not (= x2-0 x78-0)))
(assert (not (= x2-0 x1-1)))
(assert (not (= x2-0 x8-1)))
(assert (not (= x2-0 x20-1)))
(assert (not (= x2-0 x24-1)))
(assert (not (= x2-0 x25-1)))
(assert (not (= x2-0 x27-1)))
(assert (not (= x2-0 x31-1)))
(assert (not (= x2-0 x1-2)))
(assert (not (= x2-0 x6-2)))
(assert (not (= x2-0 x9-2)))
(assert (not (= x2-0 x11-2)))
(assert (not (= x2-0 x13-2)))
(assert (not (= x2-0 x487-2)))
(assert (not (= x2-0 x491-2)))
(assert (not (= x39-0 x75-0)))
(assert (not (= x39-0 x78-0)))
(assert (not (= x39-0 x1-1)))
(assert (not (= x39-0 x8-1)))
(assert (not (= x39-0 x20-1)))
(assert (not (= x39-0 x24-1)))
(assert (not (= x39-0 x25-1)))
(assert (not (= x39-0 x27-1)))
(assert (not (= x39-0 x31-1)))
(assert (not (= x39-0 x1-2)))
(assert (not (= x39-0 x6-2)))
(assert (not (= x39-0 x9-2)))
(assert (not (= x39-0 x11-2)))
(assert (not (= x39-0 x13-2)))
(assert (not (= x39-0 x487-2)))
(assert (not (= x39-0 x491-2)))
(assert (not (= x75-0 x78-0)))
(assert (not (= x75-0 x1-1)))
(assert (not (= x75-0 x8-1)))
(assert (not (= x75-0 x20-1)))
(assert (not (= x75-0 x24-1)))
(assert (not (= x75-0 x25-1)))
(assert (not (= x75-0 x27-1)))
(assert (not (= x75-0 x31-1)))
(assert (not (= x75-0 x1-2)))
(assert (not (= x75-0 x6-2)))
(assert (not (= x75-0 x9-2)))
(assert (not (= x75-0 x11-2)))
(assert (not (= x75-0 x13-2)))
(assert (not (= x75-0 x487-2)))
(assert (not (= x75-0 x491-2)))
(assert (not (= x78-0 x1-1)))
(assert (not (= x78-0 x8-1)))
(assert (not (= x78-0 x20-1)))
(assert (not (= x78-0 x24-1)))
(assert (not (= x78-0 x25-1)))
(assert (not (= x78-0 x27-1)))
(assert (not (= x78-0 x31-1)))
(assert (not (= x78-0 x1-2)))
(assert (not (= x78-0 x6-2)))
(assert (not (= x78-0 x9-2)))
(assert (not (= x78-0 x11-2)))
(assert (not (= x78-0 x13-2)))
(assert (not (= x78-0 x487-2)))
(assert (not (= x78-0 x491-2)))
(assert (not (= x1-1 x8-1)))
(assert (not (= x1-1 x20-1)))
(assert (not (= x1-1 x24-1)))
(assert (not (= x1-1 x25-1)))
(assert (not (= x1-1 x27-1)))
(assert (not (= x1-1 x31-1)))
(assert (not (= x1-1 x1-2)))
(assert (not (= x1-1 x6-2)))
(assert (not (= x1-1 x9-2)))
(assert (not (= x1-1 x11-2)))
(assert (not (= x1-1 x13-2)))
(assert (not (= x1-1 x487-2)))
(assert (not (= x1-1 x491-2)))
(assert (not (= x8-1 x20-1)))
(assert (not (= x8-1 x24-1)))
(assert (not (= x8-1 x25-1)))
(assert (not (= x8-1 x27-1)))
(assert (not (= x8-1 x31-1)))
(assert (not (= x8-1 x1-2)))
(assert (not (= x8-1 x6-2)))
(assert (not (= x8-1 x9-2)))
(assert (not (= x8-1 x11-2)))
(assert (not (= x8-1 x13-2)))
(assert (not (= x8-1 x487-2)))
(assert (not (= x8-1 x491-2)))
(assert (not (= x20-1 x24-1)))
(assert (not (= x20-1 x25-1)))
(assert (not (= x20-1 x27-1)))
(assert (not (= x20-1 x31-1)))
(assert (not (= x20-1 x1-2)))
(assert (not (= x20-1 x6-2)))
(assert (not (= x20-1 x9-2)))
(assert (not (= x20-1 x11-2)))
(assert (not (= x20-1 x13-2)))
(assert (not (= x20-1 x487-2)))
(assert (not (= x20-1 x491-2)))
(assert (not (= x24-1 x25-1)))
(assert (not (= x24-1 x27-1)))
(assert (not (= x24-1 x31-1)))
(assert (not (= x24-1 x1-2)))
(assert (not (= x24-1 x6-2)))
(assert (not (= x24-1 x9-2)))
(assert (not (= x24-1 x11-2)))
(assert (not (= x24-1 x13-2)))
(assert (not (= x24-1 x487-2)))
(assert (not (= x24-1 x491-2)))
(assert (not (= x25-1 x27-1)))
(assert (not (= x25-1 x31-1)))
(assert (not (= x25-1 x1-2)))
(assert (not (= x25-1 x6-2)))
(assert (not (= x25-1 x9-2)))
(assert (not (= x25-1 x11-2)))
(assert (not (= x25-1 x13-2)))
(assert (not (= x25-1 x487-2)))
(assert (not (= x25-1 x491-2)))
(assert (not (= x27-1 x31-1)))
(assert (not (= x27-1 x1-2)))
(assert (not (= x27-1 x6-2)))
(assert (not (= x27-1 x9-2)))
(assert (not (= x27-1 x11-2)))
(assert (not (= x27-1 x13-2)))
(assert (not (= x27-1 x487-2)))
(assert (not (= x27-1 x491-2)))
(assert (not (= x31-1 x1-2)))
(assert (not (= x31-1 x6-2)))
(assert (not (= x31-1 x9-2)))
(assert (not (= x31-1 x11-2)))
(assert (not (= x31-1 x13-2)))
(assert (not (= x31-1 x487-2)))
(assert (not (= x31-1 x491-2)))
(assert (not (= x1-2 x6-2)))
(assert (not (= x1-2 x9-2)))
(assert (not (= x1-2 x11-2)))
(assert (not (= x1-2 x13-2)))
(assert (not (= x1-2 x487-2)))
(assert (not (= x1-2 x491-2)))
(assert (not (= x6-2 x9-2)))
(assert (not (= x6-2 x11-2)))
(assert (not (= x6-2 x13-2)))
(assert (not (= x6-2 x487-2)))
(assert (not (= x6-2 x491-2)))
(assert (not (= x9-2 x11-2)))
(assert (not (= x9-2 x13-2)))
(assert (not (= x9-2 x487-2)))
(assert (not (= x9-2 x491-2)))
(assert (not (= x11-2 x13-2)))
(assert (not (= x11-2 x487-2)))
(assert (not (= x11-2 x491-2)))
(assert (not (= x13-2 x487-2)))
(assert (not (= x13-2 x491-2)))
(assert (not (= x487-2 x491-2)))

constrMHB: (assert(< x1-0 x2-0))
(assert(< x1-0 x39-0))
(assert(< x1-0 x75-0))
(assert(< x1-0 x78-0))
(assert(< x1-0 x2-0))
(assert(< x2-0 x39-0))
(assert(< x39-0 x75-0))
(assert(< x75-0 x78-0))
(assert(< x1-2 x6-2))
(assert(< x1-2 x9-2))
(assert(< x1-2 x11-2))
(assert(< x1-2 x13-2))
(assert(< x1-2 x487-2))
(assert(< x1-2 x491-2))
(assert(< x6-2 x491-2))
(assert(< x9-2 x491-2))
(assert(< x11-2 x491-2))
(assert(< x13-2 x491-2))
(assert(< x487-2 x491-2))
(assert(< x1-2 x6-2))
(assert(< x6-2 x9-2))
(assert(< x9-2 x11-2))
(assert(< x11-2 x13-2))
(assert(< x13-2 x487-2))
(assert(< x487-2 x491-2))
(assert(< x1-1 x8-1))
(assert(< x1-1 x20-1))
(assert(< x1-1 x24-1))
(assert(< x1-1 x25-1))
(assert(< x1-1 x27-1))
(assert(< x1-1 x31-1))
(assert(< x8-1 x31-1))
(assert(< x20-1 x31-1))
(assert(< x24-1 x31-1))
(assert(< x25-1 x31-1))
(assert(< x27-1 x31-1))
(assert(< x1-1 x8-1))
(assert(< x8-1 x20-1))
(assert(< x20-1 x24-1))
(assert(< x27-1 x31-1))

constrSync: (assert (< x2-0 x1-1 ))
(assert (< x39-0 x1-2 ))
(assert (< x31-1 x75-0 ))
(assert (< x491-2 x78-0 ))

obeyStr: (assert(and (< x6-2 x13-2)
 (or (< x13-2 x27-1) (< x27-1 x6-2 ))
 )
)

violateStr: (assert (or (not (and (< x11-2 x24-1)
 (or (< x24-1 x8-1) (< x8-1 x11-2 ))
 )
)(not (and (< x11-2 x25-1)
 (or (< x25-1 x8-1) (< x8-1 x11-2 ))
 )
)))


  Switch Pair: Pair[Node: gid: 24 #1   pc:0x4b6e57  R   addr:140492326781736  len: 8 value:140491777372960 order: 1546 line:/ufo/reorder/1-Linuxeasy.c:67, Node: gid: 27 #1   pc:0x46e002 W  addr:140491777372960  len: 1 value:0 order:1558 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4)]
  Depend Pair: Pair[Node: gid: 6 #2   pc:0x46e002 W  addr:140491777372960  len: 1 value:1 order:1068 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4), Node: gid: 11 #2   pc:0x4b6d99 W  addr:140492326781736  len: 8 value:140491777372960 order:1075 line:/ufo/reorder/1-Linuxeasy.c:58]
  Schedule:
[31m    x1-0    gid: 1 #0   begin order: 0[0m
[31m    x2-0    gid: 2 #0   pc:0x4282cc start  -> #1 order: 2[0m
[31m    x39-0    gid: 39 #0   pc:0x4282cc start  -> #2 order: 520[0m
[32m    x1-1    gid: 1 #1   begin order: 490[0m
[32m    x27-1    gid: 27 #1   pc:0x46e002 W  addr:140491777372960  len: 1 value:0 order:1558 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4)[0m * Swap
[33m    x1-2    gid: 1 #2   begin order: 1059[0m
[33m    x6-2    gid: 6 #2   pc:0x46e002 W  addr:140491777372960  len: 1 value:1 order:1068 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4)[0m * Depend
[33m    x9-2    gid: 9 #2   pc:0x46f51d W  addr:21817848  len: 8 value:140491777372960 order:1073 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:597 (discriminator 4)[0m
[33m    x11-2    gid: 11 #2   pc:0x4b6d99 W  addr:140492326781736  len: 8 value:140491777372960 order:1075 line:/ufo/reorder/1-Linuxeasy.c:58[0m * Depend
[32m    x8-1    gid: 8 #1   pc:0x4b6d30 W  addr:140492326781736  len: 8 value:0 order:501 line:/ufo/reorder/1-Linuxeasy.c:51[0m
[32m    x20-1    gid: 20 #1   pc:0x46f51d W  addr:21817848  len: 8 value:140492326781728 order:515 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:597 (discriminator 4)[0m
[32m    x24-1    gid: 24 #1   pc:0x4b6e57  R   addr:140492326781736  len: 8 value:140491777372960 order: 1546 line:/ufo/reorder/1-Linuxeasy.c:67[0m * Swap
[32m    x25-1    gid: 25 #1   pc:0x4b6f35  R   addr:140492326781736  len: 8 value:140491777372960 order: 1553 line:/ufo/reorder/1-Linuxeasy.c:77[0m
[32m    x31-1    gid: 31 #1   end order:1573[0m
[33m    x13-2    gid: 13 #2   pc:0x46d272  R   addr:140491777372960  len: 1 value:1 order: 1079 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:528 (discriminator 4)[0m
[33m    x487-2    gid: 487 #2   pc:0x475201 W  addr:21817848  len: 8 value:0 order:1574 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:476 (discriminator 4)[0m
[31m    x75-0    75 #0   pc: 0x44f0e8 Join   <- 1  order 1581[0m
[33m    x491-2    gid: 491 #2   end order:1579[0m
[31m    x78-0    78 #0   pc: 0x44f0e8 Join   <- 2  order 1585[0m

RawReorder:
  constr: CONS_SETLOGIC: (set-logic QF_IDL)

constrDeclare: (declare-const x1-0 Int)
(declare-const x2-0 Int)
(declare-const x39-0 Int)
(declare-const x75-0 Int)
(declare-const x78-0 Int)
(declare-const x1-1 Int)
(declare-const x8-1 Int)
(declare-const x20-1 Int)
(declare-const x24-1 Int)
(declare-const x25-1 Int)
(declare-const x27-1 Int)
(declare-const x31-1 Int)
(declare-const x1-2 Int)
(declare-const x6-2 Int)
(declare-const x9-2 Int)
(declare-const x11-2 Int)
(declare-const x13-2 Int)
(declare-const x487-2 Int)
(declare-const x491-2 Int)
(assert (not (= x1-0 x2-0)))
(assert (not (= x1-0 x39-0)))
(assert (not (= x1-0 x75-0)))
(assert (not (= x1-0 x78-0)))
(assert (not (= x1-0 x1-1)))
(assert (not (= x1-0 x8-1)))
(assert (not (= x1-0 x20-1)))
(assert (not (= x1-0 x24-1)))
(assert (not (= x1-0 x25-1)))
(assert (not (= x1-0 x27-1)))
(assert (not (= x1-0 x31-1)))
(assert (not (= x1-0 x1-2)))
(assert (not (= x1-0 x6-2)))
(assert (not (= x1-0 x9-2)))
(assert (not (= x1-0 x11-2)))
(assert (not (= x1-0 x13-2)))
(assert (not (= x1-0 x487-2)))
(assert (not (= x1-0 x491-2)))
(assert (not (= x2-0 x39-0)))
(assert (not (= x2-0 x75-0)))
(assert (not (= x2-0 x78-0)))
(assert (not (= x2-0 x1-1)))
(assert (not (= x2-0 x8-1)))
(assert (not (= x2-0 x20-1)))
(assert (not (= x2-0 x24-1)))
(assert (not (= x2-0 x25-1)))
(assert (not (= x2-0 x27-1)))
(assert (not (= x2-0 x31-1)))
(assert (not (= x2-0 x1-2)))
(assert (not (= x2-0 x6-2)))
(assert (not (= x2-0 x9-2)))
(assert (not (= x2-0 x11-2)))
(assert (not (= x2-0 x13-2)))
(assert (not (= x2-0 x487-2)))
(assert (not (= x2-0 x491-2)))
(assert (not (= x39-0 x75-0)))
(assert (not (= x39-0 x78-0)))
(assert (not (= x39-0 x1-1)))
(assert (not (= x39-0 x8-1)))
(assert (not (= x39-0 x20-1)))
(assert (not (= x39-0 x24-1)))
(assert (not (= x39-0 x25-1)))
(assert (not (= x39-0 x27-1)))
(assert (not (= x39-0 x31-1)))
(assert (not (= x39-0 x1-2)))
(assert (not (= x39-0 x6-2)))
(assert (not (= x39-0 x9-2)))
(assert (not (= x39-0 x11-2)))
(assert (not (= x39-0 x13-2)))
(assert (not (= x39-0 x487-2)))
(assert (not (= x39-0 x491-2)))
(assert (not (= x75-0 x78-0)))
(assert (not (= x75-0 x1-1)))
(assert (not (= x75-0 x8-1)))
(assert (not (= x75-0 x20-1)))
(assert (not (= x75-0 x24-1)))
(assert (not (= x75-0 x25-1)))
(assert (not (= x75-0 x27-1)))
(assert (not (= x75-0 x31-1)))
(assert (not (= x75-0 x1-2)))
(assert (not (= x75-0 x6-2)))
(assert (not (= x75-0 x9-2)))
(assert (not (= x75-0 x11-2)))
(assert (not (= x75-0 x13-2)))
(assert (not (= x75-0 x487-2)))
(assert (not (= x75-0 x491-2)))
(assert (not (= x78-0 x1-1)))
(assert (not (= x78-0 x8-1)))
(assert (not (= x78-0 x20-1)))
(assert (not (= x78-0 x24-1)))
(assert (not (= x78-0 x25-1)))
(assert (not (= x78-0 x27-1)))
(assert (not (= x78-0 x31-1)))
(assert (not (= x78-0 x1-2)))
(assert (not (= x78-0 x6-2)))
(assert (not (= x78-0 x9-2)))
(assert (not (= x78-0 x11-2)))
(assert (not (= x78-0 x13-2)))
(assert (not (= x78-0 x487-2)))
(assert (not (= x78-0 x491-2)))
(assert (not (= x1-1 x8-1)))
(assert (not (= x1-1 x20-1)))
(assert (not (= x1-1 x24-1)))
(assert (not (= x1-1 x25-1)))
(assert (not (= x1-1 x27-1)))
(assert (not (= x1-1 x31-1)))
(assert (not (= x1-1 x1-2)))
(assert (not (= x1-1 x6-2)))
(assert (not (= x1-1 x9-2)))
(assert (not (= x1-1 x11-2)))
(assert (not (= x1-1 x13-2)))
(assert (not (= x1-1 x487-2)))
(assert (not (= x1-1 x491-2)))
(assert (not (= x8-1 x20-1)))
(assert (not (= x8-1 x24-1)))
(assert (not (= x8-1 x25-1)))
(assert (not (= x8-1 x27-1)))
(assert (not (= x8-1 x31-1)))
(assert (not (= x8-1 x1-2)))
(assert (not (= x8-1 x6-2)))
(assert (not (= x8-1 x9-2)))
(assert (not (= x8-1 x11-2)))
(assert (not (= x8-1 x13-2)))
(assert (not (= x8-1 x487-2)))
(assert (not (= x8-1 x491-2)))
(assert (not (= x20-1 x24-1)))
(assert (not (= x20-1 x25-1)))
(assert (not (= x20-1 x27-1)))
(assert (not (= x20-1 x31-1)))
(assert (not (= x20-1 x1-2)))
(assert (not (= x20-1 x6-2)))
(assert (not (= x20-1 x9-2)))
(assert (not (= x20-1 x11-2)))
(assert (not (= x20-1 x13-2)))
(assert (not (= x20-1 x487-2)))
(assert (not (= x20-1 x491-2)))
(assert (not (= x24-1 x25-1)))
(assert (not (= x24-1 x27-1)))
(assert (not (= x24-1 x31-1)))
(assert (not (= x24-1 x1-2)))
(assert (not (= x24-1 x6-2)))
(assert (not (= x24-1 x9-2)))
(assert (not (= x24-1 x11-2)))
(assert (not (= x24-1 x13-2)))
(assert (not (= x24-1 x487-2)))
(assert (not (= x24-1 x491-2)))
(assert (not (= x25-1 x27-1)))
(assert (not (= x25-1 x31-1)))
(assert (not (= x25-1 x1-2)))
(assert (not (= x25-1 x6-2)))
(assert (not (= x25-1 x9-2)))
(assert (not (= x25-1 x11-2)))
(assert (not (= x25-1 x13-2)))
(assert (not (= x25-1 x487-2)))
(assert (not (= x25-1 x491-2)))
(assert (not (= x27-1 x31-1)))
(assert (not (= x27-1 x1-2)))
(assert (not (= x27-1 x6-2)))
(assert (not (= x27-1 x9-2)))
(assert (not (= x27-1 x11-2)))
(assert (not (= x27-1 x13-2)))
(assert (not (= x27-1 x487-2)))
(assert (not (= x27-1 x491-2)))
(assert (not (= x31-1 x1-2)))
(assert (not (= x31-1 x6-2)))
(assert (not (= x31-1 x9-2)))
(assert (not (= x31-1 x11-2)))
(assert (not (= x31-1 x13-2)))
(assert (not (= x31-1 x487-2)))
(assert (not (= x31-1 x491-2)))
(assert (not (= x1-2 x6-2)))
(assert (not (= x1-2 x9-2)))
(assert (not (= x1-2 x11-2)))
(assert (not (= x1-2 x13-2)))
(assert (not (= x1-2 x487-2)))
(assert (not (= x1-2 x491-2)))
(assert (not (= x6-2 x9-2)))
(assert (not (= x6-2 x11-2)))
(assert (not (= x6-2 x13-2)))
(assert (not (= x6-2 x487-2)))
(assert (not (= x6-2 x491-2)))
(assert (not (= x9-2 x11-2)))
(assert (not (= x9-2 x13-2)))
(assert (not (= x9-2 x487-2)))
(assert (not (= x9-2 x491-2)))
(assert (not (= x11-2 x13-2)))
(assert (not (= x11-2 x487-2)))
(assert (not (= x11-2 x491-2)))
(assert (not (= x13-2 x487-2)))
(assert (not (= x13-2 x491-2)))
(assert (not (= x487-2 x491-2)))

constrMHB: (assert(< x1-0 x2-0))
(assert(< x1-0 x39-0))
(assert(< x1-0 x75-0))
(assert(< x1-0 x78-0))
(assert(< x1-0 x2-0))
(assert(< x2-0 x39-0))
(assert(< x39-0 x75-0))
(assert(< x75-0 x78-0))
(assert(< x1-2 x6-2))
(assert(< x1-2 x9-2))
(assert(< x1-2 x11-2))
(assert(< x1-2 x13-2))
(assert(< x1-2 x487-2))
(assert(< x1-2 x491-2))
(assert(< x6-2 x491-2))
(assert(< x9-2 x491-2))
(assert(< x11-2 x491-2))
(assert(< x13-2 x491-2))
(assert(< x487-2 x491-2))
(assert(< x1-2 x6-2))
(assert(< x6-2 x9-2))
(assert(< x9-2 x11-2))
(assert(< x11-2 x13-2))
(assert(< x13-2 x487-2))
(assert(< x487-2 x491-2))
(assert(< x1-1 x8-1))
(assert(< x1-1 x20-1))
(assert(< x1-1 x24-1))
(assert(< x1-1 x25-1))
(assert(< x1-1 x27-1))
(assert(< x1-1 x31-1))
(assert(< x8-1 x31-1))
(assert(< x20-1 x31-1))
(assert(< x24-1 x31-1))
(assert(< x25-1 x31-1))
(assert(< x27-1 x31-1))
(assert(< x1-1 x8-1))
(assert(< x27-1 x31-1))

constrSync: (assert (< x2-0 x1-1 ))
(assert (< x39-0 x1-2 ))
(assert (< x31-1 x75-0 ))
(assert (< x491-2 x78-0 ))

obeyStr: (assert(and (< x6-2 x13-2)
 (or (< x13-2 x27-1) (< x27-1 x6-2 ))
 )
)

violateStr: (assert (or (not (and (< x11-2 x24-1)
 (or (< x24-1 x8-1) (< x8-1 x11-2 ))
 )
)(not (and (< x11-2 x25-1)
 (or (< x25-1 x8-1) (< x8-1 x11-2 ))
 )
)))


  Switch Pair: Pair[Node: gid: 8 #1   pc:0x4b6d30 W  addr:140492326781736  len: 8 value:0 order:501 line:/ufo/reorder/1-Linuxeasy.c:51, Node: gid: 27 #1   pc:0x46e002 W  addr:140491777372960  len: 1 value:0 order:1558 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4)]
  Depend Pair: Pair[Node: gid: 6 #2   pc:0x46e002 W  addr:140491777372960  len: 1 value:1 order:1068 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4), Node: gid: 11 #2   pc:0x4b6d99 W  addr:140492326781736  len: 8 value:140491777372960 order:1075 line:/ufo/reorder/1-Linuxeasy.c:58]
  Schedule:
[31m    x1-0    gid: 1 #0   begin order: 0[0m
[31m    x2-0    gid: 2 #0   pc:0x4282cc start  -> #1 order: 2[0m
[31m    x39-0    gid: 39 #0   pc:0x4282cc start  -> #2 order: 520[0m
[32m    x1-1    gid: 1 #1   begin order: 490[0m
[32m    x20-1    gid: 20 #1   pc:0x46f51d W  addr:21817848  len: 8 value:140492326781728 order:515 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:597 (discriminator 4)[0m
[32m    x27-1    gid: 27 #1   pc:0x46e002 W  addr:140491777372960  len: 1 value:0 order:1558 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4)[0m * Swap
[33m    x1-2    gid: 1 #2   begin order: 1059[0m
[33m    x6-2    gid: 6 #2   pc:0x46e002 W  addr:140491777372960  len: 1 value:1 order:1068 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:555 (discriminator 4)[0m * Depend
[33m    x9-2    gid: 9 #2   pc:0x46f51d W  addr:21817848  len: 8 value:140491777372960 order:1073 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:597 (discriminator 4)[0m
[33m    x11-2    gid: 11 #2   pc:0x4b6d99 W  addr:140492326781736  len: 8 value:140491777372960 order:1075 line:/ufo/reorder/1-Linuxeasy.c:58[0m * Depend
[32m    x8-1    gid: 8 #1   pc:0x4b6d30 W  addr:140492326781736  len: 8 value:0 order:501 line:/ufo/reorder/1-Linuxeasy.c:51[0m * Swap
[32m    x24-1    gid: 24 #1   pc:0x4b6e57  R   addr:140492326781736  len: 8 value:140491777372960 order: 1546 line:/ufo/reorder/1-Linuxeasy.c:67[0m
[32m    x25-1    gid: 25 #1   pc:0x4b6f35  R   addr:140492326781736  len: 8 value:140491777372960 order: 1553 line:/ufo/reorder/1-Linuxeasy.c:77[0m
[32m    x31-1    gid: 31 #1   end order:1573[0m
[33m    x13-2    gid: 13 #2   pc:0x46d272  R   addr:140491777372960  len: 1 value:1 order: 1079 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:528 (discriminator 4)[0m
[33m    x487-2    gid: 487 #2   pc:0x475201 W  addr:21817848  len: 8 value:0 order:1574 line:/ufo/llvm-6.0.0/projects/compiler-rt/lib/tsan/rtl/tsan_interface_atomic.cc:476 (discriminator 4)[0m
[31m    x75-0    75 #0   pc: 0x44f0e8 Join   <- 1  order 1581[0m
[33m    x491-2    gid: 491 #2   end order:1579[0m
[31m    x78-0    78 #0   pc: 0x44f0e8 Join   <- 2  order 1585[0m

